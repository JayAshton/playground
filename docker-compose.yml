services:
  traefik:
    container_name: traefik
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8081:8081"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  app:
    container_name: app
    build:
      context: frontend/.
      dockerfile: Dockerfile
    volumes:
      - node_modules:/app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=PathPrefix(`/`)"
      - "traefik.http.services.app.loadbalancer.server.port=3000"
    ports:
      - 3000
    environment:
      - PRODUCTS_API_URL=http://products-service:8080/products

  products-service:
    container_name: products
    build:
      context: microservices/.
      dockerfile: products-service/Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.products.rule=PathPrefix(`/products`)"
      - "traefik.http.services.products.loadbalancer.server.port=8080"
    ports:
      - 8080
    healthcheck:
      test: "curl --fail --silent reviews-service:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - REVIEWS_SERVICE_URL=${REVIEWS_SERVICE_URL}

  reviews-service:
    container_name: reviews
    build:
      context: microservices/.
      dockerfile: reviews-service/Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.reviews.rule=PathPrefix(`/reviews`)"
      - "traefik.http.services.reviews.loadbalancer.server.port=8080"
    ports:
      - 8080
    healthcheck:
      test: "curl --fail --silent reviews-service:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}

  postgres:
    container_name: db
    image: postgres:17.6
    restart: always
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: >
        pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1
      interval: 1s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:
  node_modules:
